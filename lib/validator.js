// Generated by CoffeeScript 1.8.0
(function() {
  var ValidatorBase, buffer, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  buffer = void 0;

  ValidatorBase = (function() {
    function ValidatorBase(schema, validatorMap, logger) {
      this.schema = schema;
      this.validatorMap = validatorMap;
      this.logger = logger;
      this.logger = this.logger;
      buffer = this;
    }

    ValidatorBase.prototype.requiredParameters = function(baseUrl, method) {
      var lastSlash, _ref, _ref1;
      lastSlash = baseUrl.lastIndexOf('/');
      if (__indexOf.call(Object.keys(this.schema), baseUrl) < 0 && lastSlash > 0) {
        baseUrl = baseUrl.slice(0, +baseUrl.lastIndexOf('/') + 1 || 9e9) + ':id';
      }
      return (_ref = this.schema) != null ? (_ref1 = _ref[baseUrl]) != null ? _ref1[method] : void 0 : void 0;
    };

    ValidatorBase.prototype.validateObj = function(obj, reqParams) {
      var err, k, key, val, _base, _i, _len;
      if (reqParams == null) {
        reqParams = [];
      }
      obj = _.omit(obj, (function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(obj);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          if (obj[k] == null) {
            _results.push(k);
          }
        }
        return _results;
      })());
      for (key in obj) {
        val = obj[key];
        if (__indexOf.call(reqParams, key) < 0) {
          err = {
            type: 'VALIDATORBASE_UNKNOWN_PARAMETER',
            data: {
              key: key
            }
          };
          return err;
        }
        if (typeof (_base = this.validatorMap)[key] === "function" ? _base[key](val) : void 0) {
          err = {
            type: 'VALIDATORBASE_INVALID_VALUE',
            data: {
              key: key,
              val: val
            }
          };
          return err;
        }
      }
      for (_i = 0, _len = reqParams.length; _i < _len; _i++) {
        key = reqParams[_i];
        if (obj[key] == null) {
          err = {
            type: 'VALIDATORBASE_MISSING_PARAMETER',
            data: {
              key: key
            }
          };
          return err;
        }
      }
      return null;
    };

    ValidatorBase.prototype.validate = function(req, res, next) {
      var e, err, o, reqParams, _ref, _ref1, _ref2, _ref3;
      reqParams = buffer.requiredParameters(req.baseUrl, req.method);
      o = {
        url: req.originalUrl,
        baseUrl: req.baseUrl,
        method: req.method,
        reqParams: reqParams,
        params: req.params,
        query: req.query,
        body: req.body,
        headers: req.headers,
        oauth: req.oauth
      };
      if ((_ref = buffer.logger) != null) {
        _ref.debug({
          msg: 'validatorbase: entered',
          data: o
        });
      }
      err = buffer.validateObj(o.params, reqParams != null ? reqParams.url : void 0);
      if (err) {
        e = {
          msg: 'validatorbase: error in url parameters',
          data: o,
          err: err
        };
        if ((_ref1 = buffer.logger) != null) {
          _ref1.err(e);
        }
        return res.status(400).json(e);
      }
      err = buffer.validateObj(o.query, reqParams != null ? reqParams.query : void 0);
      if (err) {
        e = {
          msg: 'validatorbase: error in query parameters',
          data: o,
          err: err
        };
        if ((_ref2 = buffer.logger) != null) {
          _ref2.err(e);
        }
        return res.status(400).json(e);
      }
      err = buffer.validateObj(o.body, reqParams != null ? reqParams.body : void 0);
      if (err) {
        e = {
          msg: 'validatorbase: error in body',
          data: o,
          err: err
        };
        if ((_ref3 = buffer.logger) != null) {
          _ref3.err(e);
        }
        return res.status(400).json(e);
      }
      return next();
    };

    return ValidatorBase;

  })();

  module.exports = function(schema, validatorMap, logger) {
    return new ValidatorBase(schema, validatorMap, logger);
  };

}).call(this);
